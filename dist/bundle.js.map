{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB;AACA,cAAc,mBAAO,CAAC,0CAAiB;AACvC,sBAAsB,mBAAO,CAAC,gEAA4B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,KAAK,GAAG,MAAM,GAAG,KAAK,EAAE,MAAM,GAAG,QAAQ,GAAG,QAAQ;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;;;;;;;;;;ACvLR;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB;AACA,mBAAmB;AACnB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,iDAAiD,MAAM;AACvD;AACA;AACA,CAAC;;;;;;;;;;;ACfY;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,wBAAwB;AACxB,cAAc,mBAAO,CAAC,uCAAc;AACpC,cAAc,mBAAO,CAAC,mCAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,GAAG;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,GAAG;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClOa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,cAAc,mBAAO,CAAC,mCAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8CAA8C,IAAI;AAClD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB;;;;;;;;;;;ACjDN;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2CAA2C,IAAI;AAC/C;AACA;;;;;;;UCVA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,mBAAO,CAAC,4DAAwB;AACtD,sBAAsB,mBAAO,CAAC,4DAAwB;AACtD,sBAAsB,mBAAO,CAAC,4DAAwB;AACtD,mBAAmB,mBAAO,CAAC,oEAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://-y/./ts/components/todo/todoList.ts","webpack://-y/./ts/services/api.ts","webpack://-y/./ts/services/authService.ts","webpack://-y/./ts/services/todoService.ts","webpack://-y/./ts/utils/dom.ts","webpack://-y/webpack/bootstrap","webpack://-y/./ts/main.ts"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TodoComponent = void 0;\n//处理待办列表渲染和事件监听器\nconst dom_1 = require(\"../../utils/dom\");\nconst todoService_1 = require(\"../../services/todoService\");\nclass TodoComponent {\n    //构造函数，绑定服务层，初始化监听器\n    constructor() {\n        //待办提交部分\n        this.errorContainerDiv = (0, dom_1.$)('errorContainerDiv');\n        //整个待办清单的无序列表\n        this.todoUl = (0, dom_1.$)('todoUl');\n        this.todoInput = (0, dom_1.$)('todoInput');\n        this.dateInput = (0, dom_1.$)('dateInput');\n        this.todoForm = (0, dom_1.$)('todoForm');\n        //无待办状态\n        this.emptyDiv = (0, dom_1.$)('emptyDiv');\n        this.TodoService = new todoService_1.TodoService();\n        this.setupTodoListeners();\n    }\n    setupTodoListeners() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            this.updateEmptyState();\n            //初始化todolist，本地存储有就从本地拉取，没有用空数组传入进行\n            if (localStorage.getItem('token')) {\n                const todos = yield this.TodoService.loadTodos();\n                this.renderTodoList(todos);\n            }\n            else {\n                this.renderTodoList([]);\n            }\n            //回车键提交支持\n            this.todoInput.addEventListener('keypress', (e) => {\n                if (e.key === 'Enter')\n                    this.addTodo();\n            });\n            //提交整个todo\n            (_a = this.todoForm) === null || _a === void 0 ? void 0 : _a.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.addTodo();\n            });\n        });\n    }\n    //添加待办\n    addTodo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // 获取用户输入\n            // trim方法用于去除字符串首尾的空白字符，返回新字符串\n            const todoText = this.todoInput.value.trim();\n            const rawDateValue = this.dateInput.value.trim();\n            if (!(this.validInput(this.todoInput) && this.validInput(this.dateInput)))\n                return;\n            // 格式化日期为\"2006-01-02 15:04:05\"格式\n            let dateText;\n            try {\n                // 从datetime-local输入创建日期对象\n                const dateObj = new Date(rawDateValue);\n                // 格式化为指定格式\n                const year = dateObj.getFullYear();\n                const month = String(dateObj.getMonth() + 1).padStart(2, '0');\n                const day = String(dateObj.getDate()).padStart(2, '0');\n                const hours = String(dateObj.getHours()).padStart(2, '0');\n                const minutes = String(dateObj.getMinutes()).padStart(2, '0');\n                const seconds = String(dateObj.getSeconds()).padStart(2, '0');\n                dateText = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n            }\n            catch (e) {\n                this.showError('日期格式无效');\n                return;\n            }\n            //请求成功后更新UI\n            try {\n                yield this.TodoService.addTodoToApi(todoText, dateText);\n                const todos = yield this.TodoService.loadTodos();\n                this.renderTodoList(todos);\n            }\n            catch (e) {\n                this.showError(e.message);\n            }\n            //todo 输入框刷新\n            this.todoInput.value = '';\n            this.dateInput.value = '';\n        });\n    }\n    //通过传入todo数组刷新当前页面的todolist\n    renderTodoList(todos) {\n        this.todoUl.innerHTML = '';\n        if (todos.length === 0) {\n            this.updateEmptyState();\n            return;\n        }\n        for (let i = 0; i < todos.length; ++i) {\n            const todoText = todos[i].todolist;\n            const dateText = todos[i].deadline;\n            //li设置为flex容器，内容两端对齐\n            const todoItem = document.createElement('li');\n            todoItem.className = 'flex justify-between items-center px-6 py-4';\n            //使用dataset设定id\n            todoItem.dataset.id = todos[i].id.toString();\n            //左侧，待办内容\n            const todoSpan = document.createElement('span');\n            todoSpan.textContent = todoText;\n            todoItem.appendChild(todoSpan);\n            //每个待办的容器\n            const todoDiv = document.createElement('div');\n            todoDiv.className = 'flex items-center gap-3';\n            todoItem.append(todoDiv);\n            //截止日期\n            const dateSpan = document.createElement('span');\n            dateSpan.textContent = '截至:' + dateText;\n            dateSpan.className = 'text-gray-500 text-sm';\n            todoDiv.appendChild(dateSpan);\n            //删除按钮\n            const deleteBtn = document.createElement('button');\n            deleteBtn.textContent = '删除';\n            deleteBtn.className =\n                'bg-blue-500 hover:bg-red-500 text-white font-bold py-1 px-3 rounded transition duration-200';\n            todoDiv.appendChild(deleteBtn);\n            //! 多个事件监听器会拖慢运行速度，需要根据id进行事件委托\n            deleteBtn.addEventListener('click', (e) => __awaiter(this, void 0, void 0, function* () {\n                const li = e.target.closest('li');\n                //从dataset属性中获取id\n                if (li && li.dataset.id) {\n                    try {\n                        yield this.TodoService.deleteTodo(parseInt(li.dataset.id));\n                        const todos = yield this.TodoService.loadTodos();\n                        this.renderTodoList(todos);\n                    }\n                    catch (e) {\n                        this.showError(e.message);\n                    }\n                }\n            }));\n            this.todoUl.appendChild(todoItem);\n        }\n        this.updateEmptyState();\n    }\n    //检查当前todo列表是否为空,每次对于DOM的调整都需要调用进行判断\n    updateEmptyState() {\n        if (this.todoUl.querySelectorAll('li').length === 0) {\n            this.emptyDiv.classList.remove('hidden');\n        }\n        else {\n            this.emptyDiv.classList.add('hidden');\n        }\n    }\n    //判断输入是否有效\n    validInput(input) {\n        if (!input.value.trim()) {\n            this.showError('输入字段为空');\n            //为高频事件添加防抖\n            //通过延迟执行来优化高频事件处理（键盘输入，窗口缩放）\n            //只有在事件停止触发后经过预定时间，才会执行一次处理函数\n            input.classList.add('shake-error');\n            setTimeout(() => input.classList.remove('shake-error'), 500);\n            return false;\n        }\n        this.clearError();\n        return true;\n    }\n    //在输入框附近展示错误\n    showError(msg) {\n        this.errorContainerDiv.textContent = msg;\n        this.errorContainerDiv.style.display = 'block';\n        this.todoInput.setAttribute('aria-invalid', 'true');\n    }\n    //清除当前错误\n    clearError() {\n        this.errorContainerDiv.style.display = 'none';\n        this.todoInput.removeAttribute('aria-invalid');\n    }\n}\nexports.TodoComponent = TodoComponent;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.yueLaiGroup = void 0;\n//YuelaiTodo后端实例\nexports.yueLaiGroup = axios.create({\n    baseURL: 'https://demo.yuelaigroup.com:8500/api/v1',\n    timeout: 3000,\n});\n//请求拦截器，自动添加请求头的Authorization字段\nexports.yueLaiGroup.interceptors.request.use(config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupAuthListeners = setupAuthListeners;\nexports.checkLoginStatus = checkLoginStatus;\nconst dom_1 = require(\"../utils/dom\");\nconst api_1 = require(\"./api\");\n//登录部分\n//用户登录按钮，不登录默认仅网页上呈现\nconst openLoginBtn = (0, dom_1.$)('openLoginBtn');\n//模态窗口\nconst loginModalDiv = (0, dom_1.$)('loginModalDiv');\nconst closeModalDiv = (0, dom_1.$)('closeModalDiv');\n//登录表单\nconst authForm = (0, dom_1.$)('authForm');\nconst formTitle = (0, dom_1.$)('formTitle');\n//登录和注册分页按钮\nconst loginTabBtn = (0, dom_1.$)('loginTabBtn');\nconst registerTabBtn = (0, dom_1.$)('registerTabBtn');\n//确认,接受验证码按钮\nconst submitBtn = (0, dom_1.$)('submitBtn');\nconst getCodeBtn = (0, dom_1.$)('getCodeBtn');\nconst verificationCodeInput = (0, dom_1.$)('verificationCodeInput');\n//记住我\n//todo 激活js长轮询保持登录状态\nconst rememberMeContainerDiv = (0, dom_1.$)('rememberMeContainerDiv');\n//首个输入框，根据登录/注册改变\nconst firstTipLabel = (0, dom_1.$)('firstTipLabel');\nconst firstInput = (0, dom_1.$)('firstInput');\nfunction setupAuthListeners() {\n    //用户登录，打开模态窗口\n    openLoginBtn.addEventListener('click', () => {\n        loginModalDiv.classList.remove('hidden');\n        //overflow-hidden,原子类特殊属性，用于控制元素内容超出其容器边界时的行为\n        //防止用户在打开模态窗口时滚动背景内容\n        document.body.classList.add('overflow-hidden');\n    });\n    //关闭模态窗口\n    closeModalDiv.addEventListener('click', () => {\n        loginModalDiv.classList.add('hidden');\n        document.body.classList.remove('overflow-hidden');\n        clearCountdownTimer();\n    });\n    //点击背景时关闭模态窗口\n    loginModalDiv.addEventListener('click', (e) => {\n        if (e.target === loginModalDiv) {\n            loginModalDiv.classList.add('hidden');\n            document.body.classList.remove('overflow-hidden');\n        }\n        clearCountdownTimer();\n    });\n    //切换到登录页\n    loginTabBtn.addEventListener('click', function () {\n        loginTabBtn.classList.add('border-b-2', 'border-blue-500', 'text-blue-600');\n        registerTabBtn.classList.remove('border-b-2', 'border-blue-500', 'text-blue-600');\n        registerTabBtn.classList.add('text-gray-500');\n        isLogin = true;\n        formTitle.textContent = '登录到悦来待办';\n        submitBtn.textContent = '登录';\n        firstTipLabel.textContent = '用户uuid';\n        firstInput.placeholder = '请输入用户uuid';\n        rememberMeContainerDiv.classList.remove('hidden');\n    });\n    //切换到注册页面\n    registerTabBtn.addEventListener('click', () => {\n        registerTabBtn.classList.add('border-b-2', 'border-blue-500', 'text-blue-600');\n        loginTabBtn.classList.remove('border-b-2', 'border-blue-500', 'text-blue-600');\n        loginTabBtn.classList.add('text-gray-500');\n        isLogin = false;\n        formTitle.textContent = '加入悦来待办';\n        submitBtn.textContent = '注册';\n        firstTipLabel.textContent = '邮箱地址';\n        firstInput.placeholder = '请输入邮箱地址';\n        rememberMeContainerDiv.classList.add('hidden');\n    });\n    //发送验证码\n    getCodeBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        const firstValue = (0, dom_1.$)('firstInput').value;\n        if (isLogin) {\n            const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n            if (!firstValue || !uuidRegex.test(firstValue)) {\n                alert('请输入有效的uuid');\n                return;\n            }\n        }\n        else {\n            const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n            if (!firstValue || !emailRegex.test(firstValue)) {\n                alert('请输入有效的邮箱地址');\n                return;\n            }\n        }\n        //分情况发送请求，是否为登录状态\n        if (isLogin) {\n            api_1.yueLaiGroup\n                .post('/auth/send', {\n                mail: null,\n                uuid: firstValue,\n            })\n                .then((res) => {\n                timer();\n                if (res.data.code !== 2000) {\n                    alert('验证码请求出现错误！请反馈管理员，有效的错误信息：' +\n                        res.data.code +\n                        ':' +\n                        res.data.message);\n                }\n            });\n        }\n        else {\n            api_1.yueLaiGroup\n                .post('/auth/send', {\n                mail: firstValue,\n                uuid: null,\n            })\n                .then((res) => {\n                timer();\n                if (res.data.code !== 2000) {\n                    alert('验证码请求出现错误！请反馈管理员，有效的错误信息：' +\n                        res.data.code +\n                        ':' +\n                        res.data.message);\n                }\n            });\n        }\n    });\n    //登出当前用户\n    (0, dom_1.$)('logoutBtn').addEventListener('click', () => {\n        localStorage.removeItem('uuid');\n        localStorage.removeItem('token');\n        //更新登录状态\n        checkLoginStatus();\n        window.location.reload();\n    });\n    //提交表单\n    authForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        const firstValue = (0, dom_1.$)('firstInput').value;\n        const code = verificationCodeInput.value;\n        if (isLogin) {\n            api_1.yueLaiGroup\n                .post('/login', {\n                code: code,\n                uuid: firstValue,\n            })\n                .then((res) => {\n                if (res.data.code !== 2000) {\n                    alert('登录请求出现错误！请反馈管理员，有效的错误信息：' +\n                        res.data.code +\n                        ':' +\n                        res.data.message);\n                }\n                localStorage.setItem('token', res.data.data.token);\n                localStorage.setItem('uuid', res.data.data.uuid);\n                window.location.reload();\n            });\n        }\n        else {\n            api_1.yueLaiGroup\n                .post('/register', {\n                code: code,\n                mail: firstValue,\n            })\n                .then((res) => {\n                if (res.data.code !== 2000) {\n                    alert('注册请求出现错误！请反馈管理员，有效的错误信息：' +\n                        res.data.code +\n                        ':' +\n                        res.data.message);\n                }\n                localStorage.setItem('token', res.data.data.token);\n                localStorage.setItem('uuid', res.data.data.uuid);\n                window.location.reload();\n            });\n        }\n    });\n}\nlet isLogin = true;\nlet countdownTimer = null;\n//再次获取验证码计时器，封装为函数\nfunction timer() {\n    //清除可能存在的旧计时器\n    if (countdownTimer !== null) {\n        clearInterval(countdownTimer);\n        countdownTimer = null;\n    }\n    let countdown = 60;\n    getCodeBtn.disabled = true;\n    getCodeBtn.textContent = `${countdown}秒后重新获取`;\n    const timer = setInterval(() => {\n        countdown--;\n        getCodeBtn.textContent = `${countdown}秒后重新获取`;\n        if (countdown <= 0) {\n            clearInterval(timer);\n            getCodeBtn.disabled = false;\n            getCodeBtn.textContent = '获取验证码';\n        }\n    }, 1000);\n}\n//清除定时器的函数\nfunction clearCountdownTimer() {\n    if (countdownTimer !== null) {\n        clearInterval(countdownTimer);\n        countdownTimer = null;\n    }\n    if (getCodeBtn) {\n        getCodeBtn.disabled = false;\n        getCodeBtn.textContent = '获取验证码';\n    }\n}\n//检查登录状态\nfunction checkLoginStatus() {\n    const openLoginBtn = (0, dom_1.$)('openLoginBtn');\n    const userInfo = (0, dom_1.$)('userInfo');\n    const userUuid = (0, dom_1.$)('userUuid');\n    const uuid = localStorage.getItem('uuid');\n    if (uuid) {\n        //当前localstorage存在uuid，已登录状态\n        openLoginBtn.classList.add('hidden');\n        userInfo.classList.remove('hidden');\n        userUuid.textContent = uuid;\n    }\n    else {\n        openLoginBtn.classList.remove('hidden');\n        userInfo.classList.add('hidden');\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TodoService = void 0;\nconst api_1 = require(\"./api\");\n//? 服务层逻辑：只包含API调用和数据处理\nclass TodoService {\n    constructor() {\n        this.todos = [];\n    }\n    //发送POST请求，添加todo\n    addTodoToApi(todoText, dateText) {\n        return api_1.yueLaiGroup\n            .post('/todo/add', {\n            deadline: dateText,\n            todolist: todoText,\n        })\n            .then((res) => {\n            if (res.data.code !== 2000) {\n                throw new Error(res.data.code + res.data.message);\n            }\n            return res.data.data;\n        });\n    }\n    //初始化todo数据\n    loadTodos() {\n        return api_1.yueLaiGroup\n            .get('/todo/my')\n            .then((res) => {\n            //response正常，直接加载获取到的todo\n            this.todos = res.data.data;\n            return this.todos;\n        })\n            .catch(() => {\n            //! 离线状态，从LocalStorage获取缓存的todo，加载失败不抛出错误\n            const cachedTodos = JSON.parse(localStorage.getItem('todos') || '[]');\n            this.todos = cachedTodos;\n            return this.todos;\n        });\n    }\n    //通过传入id 删除todo\n    deleteTodo(id) {\n        api_1.yueLaiGroup.post('/todo/del', { id })\n            .then(res => {\n            if (res.data.code !== 2000) {\n                throw new Error(res.data.code + res.data.message);\n            }\n        });\n    }\n}\nexports.TodoService = TodoService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.$ = $;\n//工具函数，用于判定从DOM取得的元素是否为空，简化代码\n//泛型升级，用于匹配不同类型的DOM元素（按钮，输入，选择等等）\nfunction $(id) {\n    const el = document.getElementById(id);\n    if (!el)\n        throw new Error(`Element with id ${id} not found`);\n    return el;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst authService_1 = require(\"./services/authService\");\nconst authService_2 = require(\"./services/authService\");\nconst todoService_1 = require(\"./services/todoService\");\nconst todoList_1 = require(\"./components/todo/todoList\");\ndocument.addEventListener('DOMContentLoaded', () => {\n    //DOM加载完毕，进行初始化\n    //初始化服务层\n    const todoService = new todoService_1.TodoService();\n    //初始化组件\n    const todoComponent = new todoList_1.TodoComponent();\n    (0, authService_1.setupAuthListeners)();\n    (0, authService_2.checkLoginStatus)();\n});\n"],"names":[],"sourceRoot":""}